
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}


model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  firstName String?
  lastName  String?
  phone     String?
  color     String?

  maps   MapUser[]
  layers Layer[] @relation("UserLayers")
}


model Map {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  isPublic    Boolean       @default(false)

  centerLat   Float?
  centerLng   Float?
  zoom        Int?
  bbox        Json?
  baseMapId   Int?
  baseMap     BaseMap?      @relation(fields: [baseMapId], references: [id])

  users   MapUser[]
  layers  Layer[]
  widgets MapWidget[]

  @@map("Map")
}

model BaseMap {
  id   Int    @id @default(autoincrement())
  name String
  url  String
  thumbnailUrl String? 

  maps Map[]
}

model MapUser {
  userId Int
  mapId  Int
  role   String?

  user User @relation(fields: [userId], references: [id])
  map  Map  @relation(fields: [mapId], references: [id])

  @@id([userId, mapId])
}


model Widget {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  type        String?
  config      Json?
  maps        MapWidget[]
}

model MapWidget {
  mapId    Int
  widgetId Int

  map     Map    @relation(fields: [mapId], references: [id])
  widget  Widget @relation(fields: [widgetId], references: [id])

  @@id([mapId, widgetId])
}

model Layer {
  id     Int     @id @default(autoincrement())
  name   String
  description  String? 
  mapId  Int?
  map    Map?     @relation(fields: [mapId], references: [id])
  users    User[]   @relation("UserLayers")
  features Feature[]

  type        String
  sourceUrl   String?
  ownerId     Int?
  isPublic    Boolean
  featureSchema Json?
  metadata     Json?
  crs          String     // sistema de referencia (por ejemplo, EPSG:4326)
  isVisible    Boolean     @default(true) // si el layer est√° visible por defecto
  opacity      Float       @default(1.0)  // opacidad del layer (0.0 a 1.0)
  style        Json?       // estilo del layer (puede ser un objeto JSON)
  layerType    String?     // tipo del layer: 'vector', 'raster', 'tile', etc.
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("Layer")
}

model Feature {
  id        Int     @id @default(autoincrement())
  name      String?
  type      String
  layerId   Int
  geometry  Unsupported("geometry")
  layer     Layer    @relation(fields: [layerId], references: [id])
  @@map("Feature")
}
